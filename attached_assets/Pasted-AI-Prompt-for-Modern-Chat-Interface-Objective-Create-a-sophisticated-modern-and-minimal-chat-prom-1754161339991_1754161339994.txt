AI Prompt for Modern Chat Interface
Objective: Create a sophisticated, modern, and minimal chat prompt interface using HTML, CSS, and vanilla JavaScript. The design should be clean, spacious, and responsive, inspired by interfaces like ChatGPT and Claude.
1. Project Setup & Styling
HTML Structure: Create a standard index.html file that is self-contained.
CSS Styling: All styling should be written directly within a <style> tag in the <head> of the HTML file. Use modern CSS properties like Flexbox for layout.
Font: Use the "Inter" font from Google Fonts. Add the necessary <link> tags to the <head>.
Body Styling: The <body> should have a light gray background (#F8FAFC) and use Flexbox to center the main prompt container both vertically and horizontally on the page.
2. Main Prompt Component
Create a main container <div> that is centered, has a max-width of 700px-800px, and holds the entire interface.
A. Prompt Card:
A white <div> with a large border-radius (20px), a subtle shadow, and a light gray border.
It should have internal padding (16px).
Add a custom :focus-within CSS rule that applies a subtle blue ring/shadow to the card when the textarea inside is active.
B. Textarea:
A <textarea> with a gracious minimum height (e.g., 160px) and a maximum height (e.g., 500px) to contain long inputs.
Styling: Make it transparent (no background or border) so it blends into the card. It should have generous internal padding, especially at the top and bottom, to avoid text overlapping with the controls.
Behavior:
It must auto-resize its height based on content.
Pressing Enter should submit the prompt, while Shift+Enter should create a new line.
Placeholder Text:
Implement a rotating placeholder. The text should cycle through the following prompts every 3 seconds:
"Write a trauma-informed email to donors..."
"Create a compassionate program announcement..."
"Draft sensitive client communication..."
"Play with GoldenDoodleLM - try any prompt!"
"Brainstorm inclusive fundraising ideas..."
"Speak with GoldenDoodleLM about your needs..."
"Analyze survey data with privacy protection..."
"Fetch me a social media post for our cause..."
"Rewrite this content with trauma awareness..."
"Summarize this report for our board..."
"Generate healing-centered messaging..."
"Create accessible program materials..."
"Draft culturally responsive outreach..."
"Fetch me an article about community impact..."
The rotation should stop when the user focuses on the textarea and resume if they blur away while it's empty.
Use a subtle CSS fade-in animation for the placeholder text change.
C. Brand Voice Selector:
Position a dropdown menu in the top-left corner inside the prompt card.
Button: The trigger should be a small, pill-shaped button with a light gray background. It must contain a "sparkles" SVG icon and the text of the currently selected voice (e.g., "Default Voice").
Menu: When clicked, it should reveal a dropdown menu with the names of voices in the user or organization account, and a "Neutral" option.
D. Bottom Controls:
Position a <div> at the bottom of the prompt card.
File Attachment Button (Left): A circular, transparent button with a "paperclip" SVG icon. It should have a hover state that adds a light background.
Send Button (Right): A circular button with a solid, dark gray background and a white "up arrow" SVG icon.
Disabled State: The button should be disabled (lighter color, cursor: not-allowed) when the textarea is empty or when a message is processing.
Loading State: When processing, the arrow icon should be replaced with an animated SVG loading spinner.
3. Content Mode Buttons
Below the main prompt card, create a <div> to hold a series of "pill-shaped" buttons for selecting the content mode.
Styling:
Inactive: Light background with medium text.
Active: Dark background with light text.
All buttons should have an icon and a text label (e.g., "Email", "Article").
Functionality:
Clicking a button makes it the "active" one.
Include a "More" button that toggles the visibility of secondary options like "Summarize" and "Brainstorm."
4. JavaScript Functionality (Vanilla JS)
Implement the following logic in a <script> tag at the end of the <body>:
DOM Element References: Get all necessary elements (textarea, buttons, etc.).
Textarea Auto-Resize: A function that adjusts the textarea's height on input.
Placeholder Rotation: setInterval to cycle through an array of placeholder strings. Control this interval on focus and blur events.
Message Processing: A processMessage function that:
Simulates an API call (e.g., using setTimeout).
Disables the textarea and send button.
Shows the loading spinner on the send button.
Resets the interface to its default state after the simulation.
Event Listeners:
input on the textarea for resizing.
keydown on the textarea to handle Enter for submission.
click listeners for the send button, content mode buttons, and brand voice dropdown.
A global click listener to close the brand voice dropdown when clicking outside of it.
Prompt interface Page behavior design and description:

Based on your GoldenDoodleLM codebase, the floating sidebar column has sophisticated hover-based behavior for displaying previous chats. Here's how it works:
Sidebar Interface Behavior
Collapsed State (Default)
Width: 60px fixed width
Display: Shows only a single button (new chat icon)
Position: Left edge of the chat interface
Button: Circular new chat button that's always visible for quick access
Expansion Trigger
Hover Detection: When mouse enters the sidebar container area
Smooth Animation: Width expands from 60px to 280px using CSS cubic-bezier transitions
Timing: 0.6s duration with cubic-bezier(0.4, 0, 0.2, 1) easing for smooth, professional feel
Expanded State (On Hover)
Full Width: 280px showing complete conversation list
Content Reveal:
Full "New Conversation" button with text
Scrollable list of previous conversations
Each conversation shows title and is clickable
Animation Details:
Opacity transition from 0 to 1 over 0.4s
Slides in from left with translateX(-20px) to translateX(0)
Smooth fade-in effect
Collapse Behavior
Mouse Leave: When cursor exits the sidebar area
Delay: 400ms timeout before collapsing (prevents accidental closure)
Smooth Collapse: Reverse animation back to 60px width
Content Hide: Text labels fade out, returns to icon-only view
Interactive Elements
New Chat Button:
Collapsed: 44px circular button with emoji
Expanded: Full-width rectangular button with text
Hover effects: Scale transforms and color changes
Conversation Items:
Individual hover states with color changes
Active conversation highlighted with primary color
Smooth border-left indicator for current chat
Ellipsis text overflow for long titles
Responsive Design
Mobile: Sidebar completely hidden on screens < 768px
Desktop: Full hover functionality enabled
Smooth Transitions: All state changes use CSS transitions for polished UX
Visual Polish
Background: Light gray (--light-gray) with subtle border
Shadows: No harsh shadows, relies on color transitions
Scrolling: Custom styled scrollbar for conversation list
Z-index: Properly layered at z-index 100 to appear above chat content
This creates a modern, space-efficient interface that keeps the chat area uncluttered while providing instant access to conversation history through intuitive hover interactions.
