python3 -c "
import json
import psycopg2.extras
from database import DatabaseManager
from datetime import datetime

print('Starting manual migration...')

# Initialize database
db = DatabaseManager()
conn = db.get_connection()
cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)

# Migrate invitations
try:
    with open('invitations.json', 'r') as f:
        invitations = json.load(f)
    
    print(f'Found {len(invitations)} invitations to migrate')
    
    for invite in invitations:
        cursor.execute('''
            INSERT INTO invitations 
            (invite_code, invitee_email, organization_name, invitation_type, status, created_at)
            VALUES (%s, %s, %s, %s, %s, %s)
            ON CONFLICT (invite_code) DO NOTHING
        ''', (
            invite['invite_code'],
            invite['invitee_email'], 
            invite['organization_name'],
            invite['invitation_type'],
            invite['status'],
            invite['created_at']
        ))
    
    print(f'✅ Migrated {len(invitations)} invitations')
    
except FileNotFoundError:
    print('❌ invitations.json not found')
except Exception as e:
    print(f'❌ Error migrating invitations: {e}')

# Migrate user sources
try:
    with open('user_sources.json', 'r') as f:
        user_sources = json.load(f)
    
    print(f'Found {len(user_sources)} user sources to migrate')
    
    for source in user_sources:
        cursor.execute('''
            INSERT INTO user_sources 
            (user_email, signup_source, invite_code, signup_date)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT DO NOTHING
        ''', (
            source['user_email'],
            source['signup_source'],
            source.get('invite_code'),
            source['signup_date']
        ))
    
    print(f'✅ Migrated {len(user_sources)} user sources')
    
except FileNotFoundError:
    print('❌ user_sources.json not found')
except Exception as e:
    print(f'❌ Error migrating user sources: {e}')

# Commit changes
conn.commit()

# Verify migration
cursor.execute('SELECT COUNT(*) as count FROM invitations')
inv_count = cursor.fetchone()['count']

cursor.execute('SELECT COUNT(*) as count FROM user_sources')
src_count = cursor.fetchone()['count']

print(f'\\\\n✅ Migration complete!')
print(f'invitations table: {inv_count} records')
print(f'user_sources table: {src_count} records')

cursor.close()
conn.close()
"